
from collections import deque
from copy import deepcopy
import numpy as np
import time

class Graph:
    def __init__(self, adj):
        self.adj = adj
        self.H = {'A': 3, 'B': 4, 'C': 2, 'D': 6, 'G': 0, 'S': 5}

    def a_star(self, start, goal):
        open_set, closed_set = {start}, set()
        g = {start: 0}
        parent = {start: None}

        while open_set:
            n = min(open_set, key=lambda x: g[x] + self.H[x])
            if n == goal:
                path = []
                while n is not None:
                    path.append(n)
                    n = parent[n]
                print("path found:", path[::-1])
                return path[::-1]

            open_set.remove(n)
            closed_set.add(n)

            for m, cost in self.adj.get(n, []):
                if m in closed_set:
                    continue
                tentative_g = g[n] + cost
                if m not in open_set or tentative_g < g.get(m, float('inf')):
                    g[m] = tentative_g
                    parent[m] = n
                    open_set.add(m)
        print("path does not exist!")
        return None

adj = {
    'A': [('B', 2), ('C', 1)],
    'B': [('D', 5)],
    'C': [('D', 3), ('G', 4)],
    'D': [('G', 2)],
    'S': [('A', 1), ('G', 10)]
}
Graph(adj).a_star('S', 'G')


def bestsolution(state):
    bestsol = np.array([], int).reshape(-1, 9)
    count = len(state) - 1
    while count != -1:
        bestsol = np.insert(bestsol, 0, state[count]['puzzle'], 0)
        count = (state[count]['parent'])
    return bestsol.reshape(-1, 3, 3)


def misplaced_tiles(puzzle, goal):
    mscost = np.sum(puzzle != goal) - 1
    return mscost if mscost > 0 else 0


def coordinates(puzzle):
    pos = np.array(range(9))
    for p, q in enumerate(puzzle):
        pos[q] = p
    return pos


def evaluvate_misplaced(puzzle, goal):
    steps = np.array([
        ('u', [0, 1, 2], -3),
        ('d', [6, 7, 8], 3),
        ('l', [0, 3, 6], -1),
        ('r', [2, 5, 8], 1)
    ], dtype=[('move', str, 1), ('position', list), ('head', int)])

    dtstate = [('puzzle', list), ('parent', int), ('gn', int), ('hn', int)]
    goal_pos = coordinates(goal)

    parent = -1
    gn = 0
    hn = misplaced_tiles(coordinates(puzzle), goal_pos)
    state = np.array([(puzzle, parent, gn, hn)], dtstate)

    dtpriority = [('position', int), ('fn', int)]
    priority = np.array([(0, gn + hn)], dtpriority)

    while True:
        priority = np.sort(priority, kind='mergesort', order=['fn', 'position'])
        pos, fn = priority[0]
        priority = np.delete(priority, 0, 0)

        puzzle, parent, gn, hn = state[pos]
        puzzle = np.array(puzzle)
        blank = int(np.where(puzzle == 0)[0])
        gn = gn + 1

        for s in steps:
            if blank in s['position']:
                continue
            new_puz = deepcopy(puzzle)
            new_puz[blank], new_puz[blank + s['head']] = new_puz[blank + s['head']], new_puz[blank]

            if ~(np.all(list(state['puzzle']) == new_puz, 1)).any():
                hn = misplaced_tiles(coordinates(new_puz), goal_pos)
                state = np.append(state, np.array([(new_puz, pos, gn, hn)], dtstate), 0)
                fn = gn + hn
                priority = np.append(priority, np.array([(len(state) - 1, fn)], dtpriority), 0)

                if np.array_equal(new_puz, goal):
                    print("The 8 puzzle is solvable\n")
                    return state


puzzle = [2, 8, 3, 1, 6, 4, 7, 0, 5]
goal = [1, 2, 3, 8, 0, 4, 7, 6, 5]

start_time = time.time()
out = evaluvate_misplaced(puzzle, goal)
end_time = time.time()

b = bestsolution(out)
print("Path to goal (each 3x3 board):")
for i in b:
    print(i, "\n")

print("Steps to reach goal:", len(b) - 1)
print("Total nodes visited: ", len(out))
print("Time taken to solve (in seconds):", round(end_time - start_time, 4))
