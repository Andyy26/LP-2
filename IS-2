import math

def get_key_order(key):
    return sorted(range(len(key)), key = lambda k: key[k])

def encrypt(msg, key):
    order = get_key_order(key)
    cols = len(key)
    rows = math.ceil(len(msg) / cols)
    msg += 'X' * (cols * rows - len(msg))

    grid = []
    for i in range(0, len(msg), cols):
        row = msg[i: i+cols]
        grid.append(row)

    encrypted_msg = ""
    for col_index in order:
        for row in grid:
            encrypted_msg += row[col_index]

    return encrypted_msg

def decrypt(cipher, key):
    order = get_key_order(key)
    cols = len(key)
    rows = math.ceil(len(msg)/cols)

    grid = [[''] * cols for _ in range(rows)]
    k = 0

    for i in order:
        for r in range(rows):
            grid[r][i] = cipher[k]
            k += 1

    message = ''
    for row in grid:
        message += ''.join(row)

    return message.rstrip('X')


msg = input("Enter the message: ").replace(" ","").upper()
key = input("Enter the key: ").upper()
cipher = encrypt(msg, key)
print("\nEncrypted: ", cipher)

plain = decrypt(cipher, key)
print("\nDecrypted: ", plain)
